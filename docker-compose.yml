# Docker Compose for Go Payments API

services:
  # Main application service
  go-payments-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-payments-api
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      # Mount logs directory for development
      - ./logs:/app/logs
    environment:
      # GP-API Configuration
      - GP_API_APP_ID=${GP_API_APP_ID}
      - GP_API_APP_KEY=${GP_API_APP_KEY}
      - GP_API_ENVIRONMENT=${GP_API_ENVIRONMENT:-sandbox}
      - GP_API_COUNTRY=${GP_API_COUNTRY:-US}
      - GP_API_CURRENCY=${GP_API_CURRENCY:-USD}
      - GP_API_MERCHANT_ID=${GP_API_MERCHANT_ID}
      
      # Application Configuration
      - APP_ENV=${APP_ENV:-development}
      - APP_PORT=${APP_PORT:-8000}
      
      # Logging Configuration
      - ENABLE_REQUEST_LOGGING=${ENABLE_REQUEST_LOGGING:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_DIRECTORY=${LOG_DIRECTORY:-logs}
    env_file:
      - .env
    networks:
      - payments-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/server", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - prometheus
      - grafana

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: go-payments-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - payments-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: go-payments-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - payments-network
    restart: unless-stopped

networks:
  payments-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: